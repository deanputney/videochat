{"version":3,"sources":["webpack:///./src/js/components/navbar.js","webpack:///./src/js/application.js","webpack:///./src/js/index.js","webpack:///./src/textures/checkerboard.jpg","webpack:///./src/textures/star.png","webpack:///./src/glsl/vertexShader.glsl","webpack:///./src/glsl/fragmentShader.glsl"],"names":["toggleMobileNav","document","querySelector","classList","toggle","checkerboard","require","star","vertexShader","fragmentShader","Application","opts","this","showHelpers","undefined","canvas","getElementById","container","createTooltip","textureLoader","THREE","Detector","bindEventHandlers","init","render","warning","appendChild","handleClick","bind","handleMouseMove","handleResize","showTooltip","hideTooltip","window","addEventListener","setupScene","setupRenderer","setupCamera","Interaction","renderer","scene","camera","setupLights","setupHelpers","setupRay","setupControls","addFloor","videoGroups","controls","update","updateVideoGroups","requestAnimationFrame","main","alert","div","createElement","setAttribute","tooltip","localVideo","console","log","navigator","mediaDevices","getUserMedia","video","width","height","facingMode","then","stream","srcObject","play","catch","error","event","getNDCCoordinates","clientWidth","clientHeight","aspect","updateProjectionMatrix","setSize","interactionEvent","target","name","type","uuid","data","global","x","y","getScreenCoordinates","xScreen","yScreen","innerHTML","style","autoUpdate","getComputedStyle","color","getPropertyValue","background","fog","antialias","setClearColor","setPixelRatio","devicePixelRatio","shadowMap","enabled","domElement","position","set","lookAt","dirLight","castShadow","shadow","near","add","spotLight","ambientLight","gridHelper","axesHelper","getObjectByName","raycaster","geometry","load","texture","wrapS","wrapT","repeat","material","map","side","floor","rotation","Math","PI","cursor","on","OrbitControls","maxDistance","minDistance","autoRotate","gui","DAT","min","max","delta","uniforms","value","vertexDisplacement","Float32Array","attributes","count","i","length","sin","customMesh","needsUpdate","cube","videoElement","radius","flipY","vc","group","z","push","repeatX","videoHeight","videoWidth","offset","updateVideoGroup","numParticles","particleSize","particleSpecs","particles","Array","fill","makeParticle","vertices","alphaTest","size","transparent","particleSystem","numBoxes","boxSpecs","depth","spread","meshes","makeMesh","mesh","debug","offsetLeft","offsetTop","xRelativePx","clientX","yRelativePx","clientY","screenX","screenY","table","xNDC","yNDC","canvasDomRect","getBoundingClientRect","mainDomRect","d","particle","randFloatSpread","random","app","vg","RTCMultiConnection","io","connection","socketURL","session","audio","videosContainer","onstream","e","parentNode","insertBefore","mediaElement","firstChild","addVideoGroup","played","setTimeout","openOrJoin","module","exports"],"mappings":"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","file":"home.96876e447d99334d7be9.js","sourcesContent":["/**\n * Toggle display of the navbar dropdown for small screens.\n */\nexport function toggleMobileNav() {\n  const nav = document.querySelector(\"nav\");\n  nav.classList.toggle(\"nav-grid--expanded\");\n}\n","import * as THREE from \"three\";\n// TODO: OrbitControls import three.js on its own, so the webpack bundle includes three.js twice!\nimport OrbitControls from \"orbit-controls-es6\";\nimport { Interaction } from \"three.interaction\";\n\nimport * as Detector from \"../js/vendor/Detector\";\nimport * as DAT from \"../js/vendor/dat.gui.min\";\n\nconst checkerboard = require(\"../textures/checkerboard.jpg\");\nconst star = require(\"../textures/star.png\");\nconst vertexShader = require(\"../glsl/vertexShader.glsl\");\nconst fragmentShader = require(\"../glsl/fragmentShader.glsl\");\n\nconst CAMERA_NAME = \"Perspective Camera\";\nconst DIRECTIONAL_LIGHT_NAME = \"Directional Light\";\nconst SPOT_LIGHT_NAME = \"Spotlight\";\nconst CUSTOM_MESH_NAME = \"Custom Mesh\";\n\nexport class Application {\n  constructor(opts) {\n    this.showHelpers =\n      opts && opts.showHelpers !== undefined ? opts.showHelpers : true;\n    this.canvas = document.getElementById(\"application-canvas\");\n    this.container = document.querySelector(\"main .canvas-container-inner\");\n    this.createTooltip();\n    this.textureLoader = new THREE.TextureLoader();\n\n    if (Detector.webgl) {\n      this.bindEventHandlers();\n      this.init(this.canvas);\n      this.render();\n    } else {\n      // console.warn(\"WebGL NOT supported in your browser!\");\n      const warning = Detector.getWebGLErrorMessage();\n      this.container.appendChild(warning);\n    }\n  }\n\n  /**\n   * Bind event handlers to the Application instance.\n   */\n  bindEventHandlers() {\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.showTooltip = this.showTooltip.bind(this);\n    this.hideTooltip = this.hideTooltip.bind(this);\n  }\n\n  init(canvas) {\n    const showGUI = false;\n    window.addEventListener(\"resize\", this.handleResize);\n    this.setupScene();\n    this.setupRenderer(canvas);\n    this.setupCamera();\n    const interaction = new Interaction(this.renderer, this.scene, this.camera);\n    this.setupLights();\n    if (this.showHelpers) {\n      this.setupHelpers();\n    }\n    this.setupRay();\n    this.setupControls();\n\n    if (showGUI) {\n      this.setupGUI();\n    }\n\n    this.addFloor(100, 100);\n\n    this.videoGroups = [];\n  }\n\n  render() {\n    this.controls.update();\n    this.updateVideoGroups();\n    this.renderer.render(this.scene, this.camera);\n    // when render is invoked via requestAnimationFrame(this.render) there is\n    // no 'this', so either we bind it explicitly or use an es6 arrow function.\n    // requestAnimationFrame(this.render.bind(this));\n    requestAnimationFrame(() => this.render());\n  }\n\n  createTooltip() {\n    const main = document.querySelector(\"main\");\n    if (!main) {\n      alert(`You have no '<main>' tag on ythe HTML page. You need exactly ONE`);\n    }\n    const div = document.createElement(\"div\");\n    div.setAttribute(\"class\", \"tooltip\");\n    div.setAttribute(\"data-cy\", \"tooltip\");\n    main.appendChild(div);\n    this.tooltip = div;\n  }\n\n  setupLocalVideo() {\n    this.localVideo = document.getElementById(\"local-video\");\n    console.log(\"localVideo\", this.localVideo);\n\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      var constraints = {\n        video: { width: 1280, height: 720, facingMode: \"user\" },\n      };\n\n      navigator.mediaDevices\n        .getUserMedia(constraints)\n        .then(stream => {\n          console.log(\"localVideo\", this.localVideo);\n          // apply the stream to the video element used in the texture\n          this.localVideo.srcObject = stream;\n          this.localVideo.play();\n        })\n        .catch(function(error) {\n          console.error(\"Unable to access the camera/webcam.\", error);\n        });\n    } else {\n      console.error(\"MediaDevices interface not available.\");\n    }\n  }\n\n  handleClick(event) {\n    // const [x, y] = this.getNDCCoordinates(event, true);\n    // this.raycaster.setFromCamera({ x, y }, this.camera);\n    // const intersects = this.raycaster.intersectObjects(this.scene.children);\n    // if (intersects.length > 0) {\n    //   const hexColor = Math.random() * 0xffffff;\n    //   const intersection = intersects[0];\n    //   intersection.object.material.color.setHex(hexColor);\n    //   const { direction, origin } = this.raycaster.ray;\n    //   const arrow = new THREE.ArrowHelper(direction, origin, 100, hexColor);\n    //   this.scene.add(arrow);\n    // }\n  }\n\n  handleMouseMove(event) {\n    const [x, y] = this.getNDCCoordinates(event);\n  }\n\n  handleResize(event) {\n    // console.warn(event);\n    const { clientWidth, clientHeight } = this.container;\n    this.camera.aspect = clientWidth / clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(clientWidth, clientHeight);\n  }\n\n  showTooltip(interactionEvent) {\n    const { name, uuid, type } = interactionEvent.target;\n    const { x, y } = interactionEvent.data.global;\n    const [xScreen, yScreen] = this.getScreenCoordinates(x, y);\n    this.tooltip.innerHTML = `<h4>${name} (${type})</h4><span><em>Click to cast a ray</em></span>`;\n    const style = `left: ${xScreen}px; top: ${yScreen}px; visibility: visible; opacity: 0.8`;\n    this.tooltip.style = style;\n  }\n\n  hideTooltip(interactionEvent) {\n    this.tooltip.style = \"visibility: hidden\";\n  }\n\n  /**\n   * Setup a Three.js scene.\n   * Setting the scene is the first Three.js-specific code to perform.\n   */\n  setupScene() {\n    this.scene = new THREE.Scene();\n    this.scene.autoUpdate = true;\n    // Let's say we want to define the background color only once throughout the\n    // application. This can be done in CSS. So here we use JS to get a property\n    // defined in a CSS.\n    const style = window.getComputedStyle(this.container);\n    const color = new THREE.Color(style.getPropertyValue(\"background-color\"));\n    this.scene.background = color;\n    this.scene.fog = null;\n    // Any Three.js object in the scene (and the scene itself) can have a name.\n    this.scene.name = \"My Three.js Scene\";\n  }\n\n  /**\n   * Create a Three.js renderer.\n   * We let the renderer create a canvas element where to draw its output, then\n   * we set the canvas size, we add the canvas to the DOM and we bind event\n   * listeners to it.\n   */\n  setupRenderer(canvas) {\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      canvas,\n    });\n    // this.renderer.setClearColor(0xd3d3d3);  // it's a light gray\n    this.renderer.setClearColor(0x222222); // it's a dark gray\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const { clientWidth, clientHeight } = this.container;\n    this.renderer.setSize(clientWidth, clientHeight);\n    this.renderer.shadowMap.enabled = true;\n    this.container.appendChild(this.renderer.domElement);\n    this.renderer.domElement.addEventListener(\"click\", this.handleClick);\n    this.renderer.domElement.addEventListener(\n      \"mousemove\",\n      this.handleMouseMove\n    );\n  }\n\n  setupCamera() {\n    const fov = 75;\n    const { clientWidth, clientHeight } = this.container;\n    const aspect = clientWidth / clientHeight;\n    const near = 0.1;\n    const far = 10000;\n    this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    // this.camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    this.camera.name = CAMERA_NAME;\n    this.camera.position.set(100, 100, 100);\n    this.camera.lookAt(this.scene.position);\n  }\n\n  setupLights() {\n    const dirLight = new THREE.DirectionalLight(0x4682b4, 1); // steelblue\n    dirLight.name = DIRECTIONAL_LIGHT_NAME;\n    dirLight.position.set(120, 30, -200);\n    dirLight.castShadow = true;\n    dirLight.shadow.camera.near = 10;\n    this.scene.add(dirLight);\n\n    const spotLight = new THREE.SpotLight(0xffaa55);\n    spotLight.name = SPOT_LIGHT_NAME;\n    spotLight.position.set(120, 30, 0);\n    spotLight.castShadow = true;\n    dirLight.shadow.camera.near = 10;\n    this.scene.add(spotLight);\n\n    const ambientLight = new THREE.AmbientLight(0xffaa55);\n    this.scene.add(ambientLight);\n  }\n\n  setupHelpers() {\n    const gridHelper = new THREE.GridHelper(200, 16);\n    gridHelper.name = \"Floor GridHelper\";\n    this.scene.add(gridHelper);\n\n    // XYZ axes helper (XYZ axes are RGB colors, respectively)\n    const axesHelper = new THREE.AxesHelper(75);\n    axesHelper.name = \"XYZ AzesHelper\";\n    this.scene.add(axesHelper);\n\n    const dirLight = this.scene.getObjectByName(DIRECTIONAL_LIGHT_NAME);\n\n    const dirLightHelper = new THREE.DirectionalLightHelper(dirLight, 10);\n    dirLightHelper.name = `${DIRECTIONAL_LIGHT_NAME} Helper`;\n    // this.scene.add(dirLightHelper);\n\n    const dirLightCameraHelper = new THREE.CameraHelper(dirLight.shadow.camera);\n    dirLightCameraHelper.name = `${DIRECTIONAL_LIGHT_NAME} Shadow Camera Helper`;\n    // this.scene.add(dirLightCameraHelper);\n\n    const spotLight = this.scene.getObjectByName(SPOT_LIGHT_NAME);\n\n    const spotLightHelper = new THREE.SpotLightHelper(spotLight);\n    spotLightHelper.name = `${SPOT_LIGHT_NAME} Helper`;\n    // this.scene.add(spotLightHelper);\n\n    const spotLightCameraHelper = new THREE.CameraHelper(\n      spotLight.shadow.camera\n    );\n    spotLightCameraHelper.name = `${SPOT_LIGHT_NAME} Shadow Camera Helper`;\n    // this.scene.add(spotLightCameraHelper);\n  }\n\n  setupRay() {\n    this.raycaster = new THREE.Raycaster();\n  }\n\n  /**\n   * Add a floor object to the scene.\n   * Note: Three.js's TextureLoader does not support progress events.\n   * @see https://threejs.org/docs/#api/en/loaders/TextureLoader\n   */\n  addFloor(width, height) {\n    const geometry = new THREE.PlaneGeometry(width, height, 1, 1);\n    const onLoad = texture => {\n      texture.wrapS = THREE.RepeatWrapping;\n      texture.wrapT = THREE.RepeatWrapping;\n      texture.repeat.set(4, 4);\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        side: THREE.DoubleSide,\n      });\n      const floor = new THREE.Mesh(geometry, material);\n      floor.name = \"Floor\";\n      floor.position.y = -0.5;\n      floor.rotation.x = Math.PI / 2;\n      this.scene.add(floor);\n\n      floor.cursor = \"pointer\";\n      floor.on(\"mouseover\", this.showTooltip);\n      floor.on(\"mouseout\", this.hideTooltip);\n    };\n\n    const onProgress = undefined;\n\n    const onError = event => {\n      alert(`Impossible to load the texture ${checkerboard}`);\n    };\n    this.textureLoader.load(checkerboard, onLoad, onProgress, onError);\n  }\n\n  setupControls() {\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enabled = true;\n    this.controls.maxDistance = 1500;\n    this.controls.minDistance = 0;\n    this.controls.autoRotate = true;\n  }\n\n  setupGUI() {\n    const gui = new DAT.GUI();\n    gui\n      .add(this.camera.position, \"x\")\n      .name(\"Camera X\")\n      .min(0)\n      .max(100);\n    gui\n      .add(this.camera.position, \"y\")\n      .name(\"Camera Y\")\n      .min(0)\n      .max(100);\n    gui\n      .add(this.camera.position, \"z\")\n      .name(\"Camera Z\")\n      .min(0)\n      .max(100);\n  }\n\n  /**\n   * Create an object that uses custom shaders.\n   */\n  addCustomMesh() {\n    this.delta = 0;\n    const customUniforms = {\n      delta: { value: 0 },\n    };\n\n    const material = new THREE.ShaderMaterial({\n      vertexShader,\n      fragmentShader,\n      uniforms: customUniforms,\n    });\n\n    const geometry = new THREE.SphereBufferGeometry(5, 32, 32);\n\n    this.vertexDisplacement = new Float32Array(\n      geometry.attributes.position.count\n    );\n    for (let i = 0; i < this.vertexDisplacement.length; i += 1) {\n      this.vertexDisplacement[i] = Math.sin(i);\n    }\n\n    geometry.setAttribute(\n      \"vertexDisplacement\",\n      new THREE.BufferAttribute(this.vertexDisplacement, 1)\n    );\n\n    const customMesh = new THREE.Mesh(geometry, material);\n    customMesh.name = CUSTOM_MESH_NAME;\n    customMesh.position.set(5, 5, 5);\n    this.scene.add(customMesh);\n  }\n\n  updateCustomMesh() {\n    this.delta += 0.1;\n    const customMesh = this.scene.getObjectByName(CUSTOM_MESH_NAME);\n    customMesh.material.uniforms.delta.value = 0.5 + Math.sin(this.delta) * 0.5;\n    for (let i = 0; i < this.vertexDisplacement.length; i += 1) {\n      this.vertexDisplacement[i] = 0.5 + Math.sin(i + this.delta) * 0.25;\n    }\n    // attribute buffers are not refreshed automatically. To update custom\n    // attributes we need to set the needsUpdate flag to true\n    customMesh.geometry.attributes.vertexDisplacement.needsUpdate = true;\n  }\n\n  addCube(side) {\n    const geometry = new THREE.CubeGeometry(side, side, side);\n    const material = new THREE.MeshLambertMaterial({ color: 0xfbbc05 });\n\n    const cube = new THREE.Mesh(geometry, material);\n    cube.name = \"Cube\";\n    cube.position.set(0, side / 2, 0);\n    this.scene.add(cube);\n\n    cube.cursor = \"pointer\";\n    cube.on(\"mouseover\", this.showTooltip);\n    cube.on(\"mouseout\", this.hideTooltip);\n  }\n\n  addVideoGroup(\n    videoElement,\n    radius,\n    position = new THREE.Vector3(0, radius, 0)\n  ) {\n    const geometry = new THREE.CylinderGeometry(radius, radius, 2, 32);\n\n    var texture = new THREE.VideoTexture(videoElement);\n    texture.wrapS = THREE.ClampToEdgeWrapping;\n    texture.wrapT = THREE.ClampToEdgeWrapping;\n    texture.flipY = false;\n\n    const material = new THREE.MeshBasicMaterial({ map: texture });\n    const vc = new THREE.Mesh(geometry, material);\n    vc.name = \"VideoCylinder\";\n    vc.rotation.set(Math.PI / 2, -Math.PI / 2, 0);\n\n    const group = new THREE.Group();\n    group.name = \"VideoGroup\";\n    group.add(vc);\n    group.position.set(position.x, position.y, position.z);\n    this.scene.add(group);\n    this.videoGroups.push(group);\n\n    vc.cursor = \"pointer\";\n    vc.on(\"mouseover\", this.showTooltip);\n    vc.on(\"mouseout\", this.hideTooltip);\n\n    videoElement.addEventListener(\"loadeddata\", () => {\n      // These values are fractions of 1 where 1 is covering the object precisely.\n      // repeatX / repeatY should be the inverse of w/h\n      const repeatX = videoElement.videoHeight / videoElement.videoWidth;\n      const repeatY = 1;\n      texture.repeat.set(repeatX, repeatY);\n      texture.offset.x = 0.25;\n    });\n  }\n\n  updateVideoGroup(group) {\n    if (group) {\n      group.lookAt(this.camera.position);\n    }\n  }\n\n  updateVideoGroups() {\n    for (const group of this.videoGroups) {\n      this.updateVideoGroup(group);\n    }\n  }\n\n  /**\n   * Add a particle system that uses the same texture for each particle.\n   * The texture is asynchronously loaded.\n   * Note: Three.js's TextureLoader does not support progress events.\n   * @see https://threejs.org/docs/#api/en/loaders/TextureLoader\n   */\n  addParticleSystem(numParticles, particleSize, particleSpecs) {\n    const geometry = new THREE.Geometry();\n    const particles = Array(numParticles)\n      .fill(particleSpecs)\n      .map(makeParticle);\n    geometry.vertices = particles;\n\n    const onLoad = texture => {\n      const material = new THREE.PointsMaterial({\n        // alphaTest's default is 0 and the particles overlap. Any value > 0\n        // prevents the particles from overlapping.\n        alphaTest: 0.5,\n        map: texture,\n        size: particleSize,\n        transparent: true,\n      });\n\n      const particleSystem = new THREE.Points(geometry, material);\n      particleSystem.name = \"Stars\";\n      particleSystem.position.set(-50, 50, -50);\n      this.scene.add(particleSystem);\n\n      particleSystem.cursor = \"pointer\";\n      particleSystem.on(\"mouseover\", this.showTooltip);\n      particleSystem.on(\"mouseout\", this.hideTooltip);\n    };\n\n    const onProgress = undefined;\n\n    const onError = event => {\n      alert(`Impossible to load the texture ${star}`);\n    };\n\n    this.textureLoader.load(star, onLoad, onProgress, onError);\n  }\n\n  /**\n   * Add a Three.js Group object to the scene.\n   */\n  addGroupObject(numBoxes, boxSpecs) {\n    const group = new THREE.Group();\n    group.name = \"Group of Boxes\";\n    const { depth, height, spread, width } = boxSpecs;\n    const geometry = new THREE.BoxGeometry(width, height, depth);\n\n    const meshes = Array(numBoxes)\n      .fill({ geometry, spread })\n      .map(makeMesh);\n    for (const mesh of meshes) {\n      group.add(mesh);\n    }\n    group.position.set(50, 20, 50);\n    this.scene.add(group);\n\n    group.cursor = \"pointer\";\n    group.on(\"mouseover\", this.showTooltip);\n    group.on(\"mouseout\", this.hideTooltip);\n  }\n\n  /**\n   * Convert screen coordinates into Normalized Device Coordinates [-1, +1].\n   * @see https://learnopengl.com/Getting-started/Coordinate-Systems\n   */\n  getNDCCoordinates(event, debug) {\n    const {\n      clientHeight,\n      clientWidth,\n      offsetLeft,\n      offsetTop,\n    } = this.renderer.domElement;\n\n    const xRelativePx = event.clientX - offsetLeft;\n    const x = (xRelativePx / clientWidth) * 2 - 1;\n\n    const yRelativePx = event.clientY - offsetTop;\n    const y = -(yRelativePx / clientHeight) * 2 + 1;\n\n    if (debug) {\n      const data = {\n        \"Screen Coords (px)\": { x: event.screenX, y: event.screenY },\n        \"Canvas-Relative Coords (px)\": { x: xRelativePx, y: yRelativePx },\n        \"NDC (adimensional)\": { x, y },\n      };\n      console.table(data, [\"x\", \"y\"]);\n    }\n    return [x, y];\n  }\n\n  getScreenCoordinates(xNDC, yNDC) {\n    // const {\n    //   clientHeight,\n    //   clientWidth,\n    //   offsetLeft,\n    //   offsetTop,\n    // } = this.renderer.domElement;\n\n    // TODO: save this.main at instantiation\n    const main = document.querySelector(\".single-responsive-element\");\n\n    const canvasDomRect = this.canvas.getBoundingClientRect();\n    const mainDomRect = main.getBoundingClientRect();\n    // console.log(\"canvasDomRect\", canvasDomRect, \"mainDomRect\", mainDomRect);\n    const x = canvasDomRect.x - mainDomRect.x;\n    const y = canvasDomRect.y - mainDomRect.y;\n\n    // const xRelativePx = ((xNDC + 1) / 2) * clientWidth;\n    // const yRelativePx = -0.5 * (yNDC - 1) * clientHeight;\n    // const xScreen = xRelativePx + offsetLeft;\n    // const yScreen = yRelativePx + offsetTop;\n    // TODO: this is not exactly right, so the ray will not be correct\n    const xRelativePx = ((xNDC + 1) / 2) * canvasDomRect.width;\n    const yRelativePx = -0.5 * (yNDC - 1) * canvasDomRect.height;\n    const xScreen = xRelativePx + x;\n    const yScreen = yRelativePx + y;\n    return [xScreen, yScreen];\n  }\n}\n\n/**\n * Create a particle for the particle system.\n */\nfunction makeParticle(d, i) {\n  const particle = new THREE.Vector3();\n  particle.x = THREE.Math.randFloatSpread(d.spread.x);\n  particle.y = THREE.Math.randFloatSpread(d.spread.y);\n  particle.z = THREE.Math.randFloatSpread(d.spread.z);\n  return particle;\n}\n\n/**\n * Make a mesh for each Box in the GroupObject.\n */\nfunction makeMesh(d, i) {\n  const material = new THREE.MeshLambertMaterial({\n    color: Math.random() * 0xffffff,\n  });\n  const mesh = new THREE.Mesh(d.geometry, material);\n  mesh.name = `Box ${i} in GroupObject`;\n  mesh.position.x = THREE.Math.randFloatSpread(d.spread.x);\n  mesh.position.y = THREE.Math.randFloatSpread(d.spread.y);\n  mesh.position.z = THREE.Math.randFloatSpread(d.spread.z);\n  mesh.rotation.x = Math.random() * 360 * (Math.PI / 180);\n  mesh.rotation.y = Math.random() * 360 * (Math.PI / 180);\n  mesh.rotation.z = Math.random() * 360 * (Math.PI / 180);\n  return mesh;\n}\n","import * as THREE from \"three\";\n\nimport { Application } from \"./application\";\nimport { toggleMobileNav } from \"./components/navbar\";\nimport \"../css/index.css\";\n\nwindow.toggleMobileNav = toggleMobileNav;\n\nwindow.app = new Application();\nwindow.vg = window.app.scene.getObjectByName(\"LocalVideoGroup\");\n\nwindow.THREE = THREE;\n\n// Video Chat Setup\nimport RTCMultiConnection from \"rtcmulticonnection\";\nconsole.log(RTCMultiConnection);\nimport io from \"socket.io-client\";\nglobal.io = io;\nconsole.log(\"io\", io);\n\nvar connection = new RTCMultiConnection();\nwindow.connection = connection;\n\n// this line is VERY_important\nconnection.socketURL = \"https://rtcmulticonnection.herokuapp.com:443/\";\n\n// if you want audio+video conferencing\nconnection.session = {\n  audio: true,\n  video: true,\n};\nconnection.videosContainer = document.getElementById(\"videos\");\n\nconnection.onstream = function(e) {\n  var parentNode = connection.videosContainer;\n  parentNode.insertBefore(e.mediaElement, parentNode.firstChild);\n\n  const radius = 20;\n  const position = new THREE.Vector3(\n    Math.random() * 200 - 100,\n    radius,\n    Math.random() * 200 - 100\n  );\n  app.addVideoGroup(e.mediaElement, radius, position);\n\n  var played = e.mediaElement.play();\n\n  if (typeof played !== \"undefined\") {\n    played\n      .catch(function() {\n        /*** iOS 11 doesn't allow automatic play and rejects ***/\n      })\n      .then(function() {\n        setTimeout(function() {\n          e.mediaElement.play();\n        }, 2000);\n      });\n    return;\n  }\n\n  setTimeout(function() {\n    e.mediaElement.play();\n  }, 2000);\n};\n\nconnection.openOrJoin(\"your-room-id\");\n","module.exports = __webpack_public_path__ + \"textures/checkerboard.bda67ca60caae86413aec7e10112ac3e.jpg\";","module.exports = __webpack_public_path__ + \"textures/star.0875fc7146a00ddc30bb221db0dcef90.png\";","module.exports = \"attribute float vertexDisplacement;\\nuniform float delta;\\nvarying float vOpacity;\\nvarying vec3 vUv;\\n\\nvoid main() {\\n    vUv = position;\\n    vOpacity = vertexDisplacement;\\n\\n    vec3 p = position;\\n\\n    p.x += sin(vertexDisplacement) * 50.0;\\n    p.y += cos(vertexDisplacement) * 50.0;\\n\\n    vec4 modelViewPosition = modelViewMatrix * vec4(p, 1.0);\\n    gl_Position = projectionMatrix * modelViewPosition;\\n}\\n\"","module.exports = \"uniform float delta;\\nvarying float vOpacity;\\nvarying vec3 vUv;\\n\\nvoid main() {\\n    float r = 1.0 + cos(vUv.x * delta);\\n    float g = 0.5 + sin(delta) * 0.5;\\n    float b = 0.0;\\n    vec3 rgb = vec3(r, g, b);\\n\\n    gl_FragColor = vec4(rgb, vOpacity);\\n}\""],"sourceRoot":""}